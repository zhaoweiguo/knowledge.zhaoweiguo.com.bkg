微服务架构
##############

优势::

  1.服务简单，只关注一个业务功能 
  2.每个微服务可由不同团队开发
  3.微服务是松散耦合的
  4.可用不同的编程语言与工具开发

与单体式架构相比，微服务架构有很多优点，例如::

    易于开发与维护：微服务相对小，易于理解
    独立部署：一个微服务的修改不需要协调其它服务
    伸缩性强：每个服务都可按硬件资源的需求进行独立扩容
    与组织结构相匹配：微服务架构可以更好将架构和组织相匹配，每个团队独立负责某些服务，获得更高的生产力
    技术异构性：使用最适合该服务的技术，降低尝试新技术的成本
    企业环境下的特殊要求：去中心化和集中管控/治理的平衡，分布式数据库和企业闭环数据模型的平衡

特点::

    单一职责: 独立的业务单独放在一个项目中，比如订单服务作为一个项目
    轻量级的通信: http, rpc(非轻量级的如java的RMI)
    隔离性: 每个服务间相互隔离、不干扰
    有自己的数据
    技术多样性

挑战::

  1.运维开销 
  2.DevOps要求 
  3.隐式接口 
  4.重复劳动 
  5.分布式系统的复杂性 
  6.事务、异步、测试面临挑战

微服务架构诞生背景::

    互联网行业的快速发展，需求变化快，用户数量变化快
    敏捷开发深入人心，用最小的代价，做最快的迭代，频繁修改、测试、上线
    容器技术的成熟，是微服务的技术基础


::

  微服务只是结果，而不是最终目的。微服务的目的是有效的拆分应用，实现敏捷开发和部署


Docker最大的特点就是轻量，启动速度快，扩张快，部署快，因此具体实现业务的服务，都应该放在Docker里面进行部署，但是一定要强调，并且一定要保证无状态化，这是快速扩张，自主更新的基础

* 无状态化包括::

    1.没有Session 
    2.磁盘中没有任何中间结果文件 
    3.内存中没有任何处理中间结果，状态

    比较现实的替代方案是Redis，NFS文件共享等等

要求::

  熟悉微服务理论,有过任意RPC框架使用经验,有gRPC,dubbo使用经验
  了解etcd,zookeeper的使用场景
  技术：『容器研究』Docker、kubernetes学习研究


可能由于Service Mesh的发展而被抛弃掉的技术栈:

.. figure:: /images/microservices/tech_stack_2018.png
   :width: 80%


迁移微服务架构
==============

如何从单体架构=>微服务架构::

    - 单体架构
    - 垂直架构
    - SOA架构
    - 微服务架构




参考
====


* https://app.yinxiang.com/fx/7583fd82-196f-4935-b625-5c5c0fa75c16
* https://app.yinxiang.com/fx/00df0370-4452-426f-9cf1-6724644b06b8
* https://app.yinxiang.com/fx/3f06d693-c5d9-4f68-be16-4d8a4938379e
* https://app.yinxiang.com/fx/ab629053-5fe4-41ed-9669-fe71f8bedab3




