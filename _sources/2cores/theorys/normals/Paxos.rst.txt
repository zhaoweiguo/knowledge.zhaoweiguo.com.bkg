一致性-Paxos算法
################


Paxos算法的场景比FLP的系统模型还要松散，除了异步通信，Paxos允许消息丢失（通信不健壮），但Paxos却被认为是最牛的一致性算法，其作者Lamport也获得2014年的图灵奖，这又是为什么？


Paxos中存在活锁，理论上的活锁会导致Paxos算法无法满足Termination属性，也就不算一个正确的一致性算法。Lamport在自己的论文中也提到“FLP结果表明，不存在完全满足一致性的异步算法..."，因此他建议通过Leader来代替Paxos中的Proposer，而Leader则通过随机或其他方式来选定（Paxos中假如随机过程会极大降低FLP发生的概率）。也就是说Paxos算法其实也不算理论上完全正确的，只是在工程实现中避免了一些理论上存在的问题。但这丝毫不影响Paxos的伟大性！

节点分为三种角色::

    ① 提案者: 提出提案,系统提案都有自增ID,(往往是客户端担任)
    ② 接受者: 对提出的提案进行投票(服务端)
    ③ 学习者: 对投票传播学习,不参与投票

约束条件::

    ①保证决议结果是正确的,不会出现错误.只有被提案者提出的提案才会被投票接受.一次执行中被多数接受的提案成为最终决议
    ②保证决议在有限时间内完成,决议总会产生,并且学习者会接受决议

过程:

.. image:: /images/theorys/Paxos1.png








