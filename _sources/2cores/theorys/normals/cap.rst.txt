并发相关-CAP
###############


分布式系统理论基础 - CAP [1]_
-----------------------------

CAP由Eric Brewer在2000年PODC会议上提出[1][2]，是Eric Brewer在Inktomi[3]期间研发搜索引擎、分布式web缓存时得出的关于数据一致性(consistency)、服务可用性(availability)、分区容错性(partition-tolerance)的猜想：

It is impossible for a web service to provide the three following guarantees : Consistency, Availability and Partition-tolerance.

* 数据一致性(consistency)：如果系统对一个写操作返回成功，那么之后的读请求都必须读到这个新数据；如果返回失败，那么所有读操作都不能读到这个数据，对调用者而言数据具有强一致性(strong consistency) (又叫原子性 atomic、线性一致性 linearizable consistency)[5]
* 服务可用性(availability)：所有读写请求在一定时间内得到响应，可终止、不会一直等待
* 分区容错性(partition-tolerance)：在网络分区的情况下，被分隔的节点仍能正常对外服务

说明::

    1. 在某时刻如果满足AP，分隔的节点同时对外服务但不能相互通信，将导致状态不一致，即不能满足C
    2. 如果满足CP，网络分区的情况下为达成C，请求只能一直等待，即不满足A
    3. 如果要满足CA，在一定时间内要达到节点状态一致，要求不能出现网络分区，则不能满足P

一致性::

    1. 序列一致性(sequential consistency)
        不要求时序一致，A操作先于B操作，在B操作后如果所有调用端读操作得到A操作的结果，满足序列一致性
    2. 最终一致性(eventual consistency)
        放宽对时间的要求，在被调完成操作响应后的某个时间点，被调多个节点的数据最终达成一致

CAP定理能够将这些一致性算法的集合进行归类::

    C+A: 以2阶段提交(2 phase commit)为代表的严格选举协议。
        当通信中断时算法不具有终止性（即不具备分区容忍性）;
    C+P: 以Paxos、Raft为代表的多数派选举算法。
        当不可用的执行过程超过半数时，算法无法得到正确结果（即会出现不可用的情况）;
    A+P: 以Gossip协议为代表的冲突解决协议。
        当网络分区存在和执行过程正确时，只能等待分区消失才保持一致性（即不具备强一致性）

.. note:: 基于CAP定理，我们需要根据不同场景的不同业务要求来进行算法上的权衡。对于分布式存储系统来说，网络连接故障是无法避免的。在设计系统时不得不考虑分区容忍性，所以我们实际上只能在一致性和可用性之间进行权衡。

.. note:: 特别值得一提的经典设计范例是阿里巴巴的OceanBase系统。它将数据分为了冷数据和热数据两个不同的场景。对于冷数据，规定只读不写。这样就不需要处理分布式写操作带来的一致性问题，只需保证可用性和分区容忍性即可（即AP场景）。而对于新增的热数据，由于用户需要频繁访问，所以采取不同的服务器分片进行服务，本地读写的模式，不需要考虑网络分区的问题（即CA场景）。通过对CAP定理的深刻理解和灵活运用，构建出了满足高并发读写、处理海量金融数据的分布式数据库。










PACELC
------
CAP理论的修改版本

例如延时(latency)，它是衡量系统可用性、与用户体验直接相关的一项重要指标[16]。CAP理论中的可用性要求操作能终止、不无休止地进行，除此之外，我们还关心到底需要多长时间能结束操作，这就是延时，它值得我们设计、实现分布式系统时单列出来考虑。

延时与数据一致性也是一对“冤家”，如果要达到强一致性、多个副本数据一致，必然增加延时。加上延时的考量，我们得到一个CAP理论的修改版本PACELC[17]：如果出现P(网络分区)，如何在A(服务可用性)、C(数据一致性)之间选择；否则，如何在L(延时)、C(数据一致性)之间选择






.. [1] https://app.yinxiang.com/fx/12b8f4c1-b55e-4368-a1c3-cc57265df5b1